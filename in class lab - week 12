#include <limits.h>
#include <stdio.h>

#define V 6

// A utility function to find the vertex with minimum distance value, from
// the set of vertices not yet included in shortest path tree
int minDistance(int dist[], bool vertexVisited[])
{
    // Initialize the minimum value.
    int min = INT_MAX, min_index;

    for (int v = 0; v < V; v++)
        if (vertexVisited[v] == false && dist[v] <= min)
            min = dist[v], min_index = v;

    return min_index;
}

// printing the constructed distance array
int printSolution(int dist[], int n)
{
    printf("Vertex   Distance from Source\n");
    for (int i = 0; i < V; i++)
        printf("%d ------- %d\n", i, dist[i]);
}


// implementing Dijkstra's single source shortest path algorithm
// for a graph represented using adjacency matrix representation
void dijkstra(int graph[V][V], int src)
{
    int dist[V]; // The output array

    bool vertexVisited[V]; // vertexVisited[i] = true , if vertex i is included in shortest path tree or shortest distance from src to i is finalized

    // Initialize all distances as INFINITE and stpSet[] as false
    for (int i = 0; i < V; i++)
        dist[i] = INT_MAX, vertexVisited[i] = false;

    // Distance of source vertex from itself is 0
    dist[src] = 0;

    // Finding shortest path for all vertices
    for (int count = 0; count < V - 1; count++) {
        // Picking the minimum distance vertex from the set of vertices not
        // yet processed
        int u = minDistance(dist, vertexVisited);

        // Mark the picked vertex as processed
        vertexVisited[u] = true;

        // Updating dist value of the adjacent vertices of the picked vertex.
        for (int v = 0; v < V; v++)

            // Update dist[v] only if is not in vertexVisited, there is an edge from
            // u to v, and total weight of path from src to  v through u is
            // smaller than current value of dist[v]
            if (!vertexVisited[v] && graph[u][v] && dist[u] != INT_MAX
                && dist[u] + graph[u][v] < dist[v])
                dist[v] = dist[u] + graph[u][v];
    }


    printSolution(dist, V);
}



int main()
{
    int graph[V][V] = {{0,10,0,0,15,5},
                        {10,0,10,30,0,0},
                        {0,10,0,12,5,0},
                        {0,30,12,0,0,20},
                        {15,0,5,0,0,0},
                        {5,0,0,20,0,0}};
    int source_node = 5;
    printf("Source is %d \n",source_node);
    dijkstra(graph, source_node);

    return 0;
}
